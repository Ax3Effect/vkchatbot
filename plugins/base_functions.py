# -*- coding: utf-8 -*-

from random import randint
from time import strftime
import random
import time
import threading
import requests





def init():
    try:
        global textFiles
        global textFileUnavailable
        with open('textFile.txt', encoding="utf-8") as f:
            textFiles = f.readlines()
        textFileUnavailable = False
    except Exception:
        textFileUnavailable = True

def RateLimited(maxPerSecond):
    minInterval = 1.0 / float(maxPerSecond)
    def decorate(func):
        lastTimeCalled = [0.0]
        def rateLimitedFunction(*args,**kargs):
            elapsed = time.clock() - lastTimeCalled[0]
            leftToWait = minInterval - elapsed
            if leftToWait>0:
                time.sleep(leftToWait)
            ret = func(*args,**kargs)
            lastTimeCalled[0] = time.clock()
            return ret
        return rateLimitedFunction
    return decorate



def respond_to(message_to):
    def wrapper(func):
        def responding_to(*args, **kwargs):
            msg_wrap = args[0]["msg"]
            if msg_wrap.split(' ')[0].lower() in message_to: 
                return func(*args, **kwargs)
        return responding_to
    return wrapper


ALL_FUNCTIONS = ["msg_test", "msg_hi", "msg_truth", "msg_chatmode", "msg_infa"] # –°–Æ–î–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û–ë–ê–í–ò–¢–¨ –ù–ê–ó–í–ê–ù–ò–ï –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò
ALL_CHATMODS = {"1":"chat_huf", "2":"chat_custom_texts"} # –ê –°–Æ–î–ê –ù–ê–ó–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò –ß–ê–¢–ú–û–î–ê

def return_functions():
    return ALL_FUNCTIONS

def return_chatmods():
    return ALL_CHATMODS

@respond_to(["—Ç–µ—Å—Ç","test"])
def msg_test(msg):
    return {"msg":"test", "photo_id":"photo286006014_370245189"}
    #return "Test success {} %.".format(str(randint(2,100)))

@respond_to(["–ø—Ä–∏–≤–µ—Ç", "–∫—É", "hi"])
def msg_hi(msg):
    return "–ü—Ä–∏–≤–µ—Ç!\n –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–ª–æ–≤–æ '–ø–æ–º–æ—â—å', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."

@respond_to(["–ø–æ–º–æ—â—å"])
def msg_help(msg):
    return "üëπ"

@respond_to(["–ø—Ä–∞–≤–¥–∞"])
def msg_truth(msg):
    pravdamsg = []
    goodmsg = ["üé±–ê–±—Å–æ–ª—é—Ç–Ω–æ!", "üé±–ê–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ!", "üé±–í–µ—Ä–Ω–æ!", "üé±–ü—Ä–∞–≤–¥–∞!", "üé±–ö–æ–Ω–µ—á–Ω–æ –∂–µ –¥–∞!", "üé±–ë–µ—Å—Å–ø–æ—Ä–Ω–æ.", "üé±–î—É–º–∞—é –¥–∞."]
    neutralmsg = ["üé±–í–æ–∑–º–æ–∂–Ω–æ.", "üé±–ù–µ —É–≤–µ—Ä–µ–Ω.", "üé±–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å.", "üé±–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ."]
    badmsg = ["üé±–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç.", "üé±–í—Ä—è–¥–ª–∏.", "üé±–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω–µ—Ç.", "üé±–ö–æ–Ω–µ—á–Ω–æ –Ω–µ—Ç.", "üé±–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ.", "üé±–ù–µ–ø—Ä–∞–≤–¥–∞. "]
    pravdamsg = goodmsg + neutralmsg + badmsg
    pravdafinal = random.choice(pravdamsg)
    return {"msg":pravdafinal, "msg_id":msg["msg_id"]}

@respond_to(["—á–∞—Ç–º–æ–¥", "chatmode"])
def msg_chatmode(msg):
    msg_edit = msg["msg"].split()
    msg_edit1 = int(msg[1])
    try:
        probability = int(msg[2])
    except Exception:
        probability = 1
    try:
        photo_probability = int(msg[3])
    except Exception:
        photo_probability = 1
    #if int(userid) == int(controlID):
    autoChatMode = msg_edit1
    vk_message = "// –†–µ–∂–∏–º —á–∞—Ç–∞ —Å–º–µ–Ω–µ–Ω –Ω–∞: " + str(msg_edit1) + ", –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:" + str(probability) + ", –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ç–æ: " + str(photo_probability)
    return {"msg":vk_message, "CHANGE_chatmode":autoChatMode, "CHANGE_probability":probability, "CHANGE_photo_probability":photo_probability}

@respond_to(["–∏–Ω—Ñ–∞","–∏–Ω—Ñ–∞,"])
def msg_infa(msg):
    msg = msg["msg"]
    msgInfa = msg.split()

    msgInfa = msgInfa[1:]
    if msgInfa[0] == "—á—Ç–æ":
        msgInfa.pop(0)
    
    msgInfa = ' '.join(msgInfa)
    vk_message = "–ò–Ω—Ñ–∞, —á—Ç–æ {} - {}%. ".format(msgInfa, str(randint(2,100)))
    return vk_message

def chat_huf(msg):
    huifURL = "http://huifikator.ru/api.php?text=" + str(msg["msg"])
    huifGet = requests.get(huifURL)
    huifGet = huifGet.text
    return str(huifGet)

@RateLimited(1)
def chat_custom_texts(msg):
    if textFileUnavailable == False:
        probability = msg["probability"]
        photo_probability = msg["photo_probability"]

        random_msg = random.random()
        random_photo = random.random()
        if random_msg < float(probability):
            chosenMsg = random.choice(textFiles) 

            if random_photo < float(photo_probability):
                photo_list = ["photo286006014_371428465"]
                chosenPhoto = random.choice(photo_list)
                return {"msg":chosenMsg, "photo_id":chosenPhoto}
            else:
                return {"msg":chosenMsg}
            pass









